#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <curl/curl.h>
#include <signal.h>

#define DEFAULT_N_PROCESSES 4
#define MAX_URLS 1000

volatile sig_atomic_t interrupting = 0;
pid_t child_pids[MAX_URLS];
int num_children = 0;

void criar_nome_arquivo(char *url, char *nome_arquivo) {
    // Ignorar "http://" ou "https://"
    char *inicio = url;
    if (strncmp(url, "http://", 7) == 0) {
        inicio = url + 7;
    } else if (strncmp(url, "https://", 8) == 0) {
        inicio = url + 8;
    }
    
    //copiar URL para nome_arquivo
    strcpy(nome_arquivo, inicio);
    
    //substituir barras e pontos por _
    int ultimo_ponto = -1;
    int tamanho = strlen(nome_arquivo);
    
    // onde esta a posicao do ultimo ponto
    for (int i = 0; i < tamanho; i++) {
        if (nome_arquivo[i] == '.') {
            ultimo_ponto = i;
        }
    }
    
    // substituir '/' e '.' (exceto o último) por '_'
    for (int i = 0; i < tamanho; i++) {
        if (nome_arquivo[i] == '/' || (nome_arquivo[i] == '.' && i != ultimo_ponto)) {
            nome_arquivo[i] = '_';
        }
    }
}

// Handler para SIGINT (Ctrl+C)
void sig_handler(int signum) {
    char resposta[10];
    
    if (signum == SIGINT) {
        if (interrupting) return; // Evitar múltiplas interrupções
        interrupting = 1;
        
        printf("\nDeseja realmente sair? (s/n): ");
        fflush(stdout);
        
        if (fgets(resposta, sizeof(resposta), stdin) != NULL) {
            if (resposta[0] == 's' || resposta[0] == 'S') {
                // Terminar todos os processos filhos
                for (int i = 0; i < num_children; i++) {
                    if (child_pids[i] > 0) {
                        kill(child_pids[i], SIGTERM);
                    }
                }
                
                printf("Terminando todas as transferências e removendo arquivos incompletos...\n");
                exit(0);
            } else {
                interrupting = 0;
                printf("Continuando downloads...\n");
            }
        }
    }
}

// fazer download de uma URL
int fazer_download(char *url, char *nome_arquivo) {
    CURL *curl;
    int resultado;
    int fd;
    
    curl = curl_easy_init();
    if (!curl) {
        return -1;
    }
    
    // Primeiro verificar se o download vai funcionar antes de criar o arquivo
    curl_easy_setopt(curl, CURLOPT_URL, url);
    curl_easy_setopt(curl, CURLOPT_NOBODY, 1L);  // Apenas cabeçalho para verificação
    curl_easy_setopt(curl, CURLOPT_FAILONERROR, 1L);
    
    resultado = curl_easy_perform(curl);
    curl_easy_cleanup(curl);
    
    if (resultado != CURLE_OK) {
        return resultado;
    }
    
    // Se chegamos aqui, podemos criar o arquivo e fazer o download
    fd = open(nome_arquivo, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        return -1;
    }
    
    curl = curl_easy_init();
    if (!curl) {
        close(fd);
        unlink(nome_arquivo);  // Remove o arquivo em caso de erro
        return -1;
    }
    
    // configurar curl
    FILE *fp = fdopen(fd, "wb");
    curl_easy_setopt(curl, CURLOPT_USERAGENT, "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/81.0");
    curl_easy_setopt(curl, CURLOPT_URL, url);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);
    curl_easy_setopt(curl, CURLOPT_FAILONERROR, 1L);
    
    // realizar download
    resultado = curl_easy_perform(curl);
    
    // liberar recursos
    fclose(fp);
    curl_easy_cleanup(curl);
    
    if (resultado != CURLE_OK) {
        unlink(nome_arquivo);  // Remove o arquivo em caso de erro
    }
    
    return resultado;
}

// Para comunicação entre processos sem pipes ou flock
void salvar_resultado(char *url, int sucesso) {
    char nome_resultado[1024];
    int fd;
    
    // Criar nome de arquivo único baseado na URL para cada processo
    sprintf(nome_resultado, "/tmp/web_downloader_%d_%s", getpid(), url);
    
    // Substituir caracteres problemáticos no nome do arquivo
    for (int i = 0; nome_resultado[i]; i++) {
        if (nome_resultado[i] == '/' || nome_resultado[i] == ':' || nome_resultado[i] == '?' || 
            nome_resultado[i] == '&' || nome_resultado[i] == '=' || nome_resultado[i] == ' ') {
            nome_resultado[i] = '_';
        }
    }
    
    // Criar o arquivo temporário com o resultado
    fd = open(nome_resultado, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd != -1) {
        char buffer[1024];
        sprintf(buffer, "%d\n%s\n", sucesso, url);
        write(fd, buffer, strlen(buffer));
        close(fd);
    }
}

// função para processar uma única URL em um processo filho
void processar_url_filho(char *url) {
    char nome_arquivo[512] = {0};
    int resultado;
    
    // Inicializar curl global no processo filho
    curl_global_init(CURL_GLOBAL_ALL);
    
    // Obter nome do arquivo
    criar_nome_arquivo(url, nome_arquivo);
    
    // Fazer download
    resultado = fazer_download(url, nome_arquivo);
    
    // Salvar resultado para o processo pai ler depois
    salvar_resultado(url, resultado == CURLE_OK);
    
    // Liberar recursos e sair
    curl_global_cleanup();
    exit(0);
}

// Função para processar arquivo de URLs em paralelo com N processos
int processar_arquivo_urls_paralelo(char *nome_arquivo, int n_processos) {
    FILE *arquivo;
    char url[512];
    int processos_ativos = 0;
    int status;
    pid_t pid;
    
    // Abrir arquivo de URLs
    arquivo = fopen(nome_arquivo, "r");
    if (!arquivo) {
        printf("ERRO: Não foi possível abrir o arquivo %s\n", nome_arquivo);
        return -1;
    }
    
    // Limpar qualquer resultado antigo
    system("rm -f /tmp/web_downloader_*");
    
    // Ler cada linha e criar processos para fazer download
    while (fgets(url, sizeof(url), arquivo)) {
        // Remover '\n' do final da linha
        int len = strlen(url);
        if (len > 0 && url[len-1] == '\n') {
            url[len-1] = '\0';
        }
        
        if (strlen(url) > 0) {
            // Se já temos N processos rodando, espere algum terminar
            if (processos_ativos >= n_processos) {
                pid_t finished_pid = wait(&status);
                processos_ativos--;
                
                // Exibir mensagens do processo que terminou
                char comando[1024];
                sprintf(comando, "find /tmp -name \"web_downloader_%d_*\" | sort", finished_pid);
                FILE *pipe = popen(comando, "r");
                if (pipe) {
                    char file_path[1024];
                    while (fgets(file_path, sizeof(file_path), pipe)) {
                        // Remover nova linha
                        file_path[strcspn(file_path, "\n")] = 0;
                        
                        // Ler e exibir resultado
                        FILE *result_file = fopen(file_path, "r");
                        if (result_file) {
                            char success_str[10];
                            char url_str[512];
                            
                            fgets(success_str, sizeof(success_str), result_file);
                            fgets(url_str, sizeof(url_str), result_file);
                            
                            // Remover novas linhas
                            success_str[strcspn(success_str, "\n")] = 0;
                            url_str[strcspn(url_str, "\n")] = 0;
                            
                            if (atoi(success_str)) {
                                printf("%s baixada com sucesso!\n", url_str);
                            } else {
                                printf("%s não pode ser baixada.\n", url_str);
                            }
                            
                            fclose(result_file);
                            unlink(file_path);  // Remover arquivo temporário
                        }
                    }
                    pclose(pipe);
                }
            }
            
            // Criar novo processo para fazer download
            pid = fork();
            if (pid == 0) {
                // Processo filho
                fclose(arquivo);  // Fechar o arquivo no filho
                processar_url_filho(url);
                // O filho não chega aqui (exit(0) acima)
            } else if (pid > 0) {
                // Processo pai
                processos_ativos++;
                if (num_children < MAX_URLS) {
                    child_pids[num_children++] = pid;
                }
            } else {
                // Erro ao criar processo
                printf("ERRO: Falha ao criar processo para URL %s\n", url);
            }
        }
    }
    
    // Fechar arquivo 
    fclose(arquivo);
    
    // Aguardar todos os processos filhos terminarem
    while (processos_ativos > 0) {
        pid_t finished_pid = wait(&status);
        processos_ativos--;
        
        // Exibir mensagens do processo que terminou
        char comando[1024];
        sprintf(comando, "find /tmp -name \"web_downloader_%d_*\" | sort", finished_pid);
        FILE *pipe = popen(comando, "r");
        if (pipe) {
            char file_path[1024];
            while (fgets(file_path, sizeof(file_path), pipe)) {
                // Remover nova linha
                file_path[strcspn(file_path, "\n")] = 0;
                
                // Ler e exibir resultado
                FILE *result_file = fopen(file_path, "r");
                if (result_file) {
                    char success_str[10];
                    char url_str[512];
                    
                    fgets(success_str, sizeof(success_str), result_file);
                    fgets(url_str, sizeof(url_str), result_file);
                    
                    // Remover novas linhas
                    success_str[strcspn(success_str, "\n")] = 0;
                    url_str[strcspn(url_str, "\n")] = 0;
                    
                    if (atoi(success_str)) {
                        printf("%s baixada com sucesso!\n", url_str);
                    } else {
                        printf("%s não pode ser baixada.\n", url_str);
                    }
                    
                    fclose(result_file);
                    unlink(file_path);  // Remover arquivo temporário
                }
            }
            pclose(pipe);
        }
    }
    
    // Limpar quaisquer arquivos temporários restantes
    system("rm -f /tmp/web_downloader_*");
    
    return 0;
}

int main(int argc, char **argv) {
    int n_processos = DEFAULT_N_PROCESSES;
    struct sigaction sa;
    
    // Verificar argumentos
    if (argc < 2) {
        printf("ERRO: Uso incorreto\n");
        printf("Para baixar uma URL: %s URL\n", argv[0]);
        printf("Para baixar URLs de um arquivo: %s -f ARQUIVO [-N NUM_PROCESSOS]\n", argv[0]);
        return -1;
    }
    
    // Configurar handler para SIGINT (Ctrl+C)
    sa.sa_handler = sig_handler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;
    sigaction(SIGINT, &sa, NULL);
    
    // Inicializar curl global
    curl_global_init(CURL_GLOBAL_ALL);
    
    // Verificar parâmetros
    if (strcmp(argv[1], "-f") == 0) {
        if (argc < 3) {
            printf("ERRO: Nome do arquivo não especificado após -f\n");
            return -1;
        }
        
        // Verificar se há parâmetro -N
        for (int i = 3; i < argc; i++) {
            if (strcmp(argv[i], "-N") == 0 && i+1 < argc) {
                n_processos = atoi(argv[i+1]);
                if (n_processos <= 0) n_processos = DEFAULT_N_PROCESSES;
                break;
            }
        }
        
        // Processar arquivo com N processos paralelos
        processar_arquivo_urls_paralelo(argv[2], n_processos);
    } else {
        // Baixar uma única URL
        char nome_arquivo[512] = {0};
        criar_nome_arquivo(argv[1], nome_arquivo);
        
        int resultado = fazer_download(argv[1], nome_arquivo);
        
        if (resultado == CURLE_OK) {
            printf("%s baixada com sucesso!\n", argv[1]);
        } else {
            printf("%s não pode ser baixada.\n", argv[1]);
        }
    }
    
    // Liberar recursos globais do curl
    curl_global_cleanup();
    
    return 0;
}